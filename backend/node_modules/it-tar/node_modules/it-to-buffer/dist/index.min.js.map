{
  "version": 3,
  "sources": ["../src/index.ts", "../../../node_modules/uint8arrays/src/alloc.ts", "../../../node_modules/uint8arrays/src/concat.ts"],
  "sourcesContent": ["/**\n * @packageDocumentation\n *\n * Collects all `Uint8Array` values from an (async)iterable and returns them as a single `Uint8Array`.\n *\n * @example\n *\n * ```javascript\n * import toBuffer from 'it-to-buffer'\n *\n * // This can also be an iterator, generator, etc\n * const values = [Buffer.from([0, 1]), Buffer.from([2, 3])]\n *\n * const result = toBuffer(values)\n *\n * console.info(result) // Buffer[0, 1, 2, 3]\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import toBuffer from 'it-to-buffer'\n *\n * const values = async function * () {\n *   yield Buffer.from([0, 1])\n *   yield Buffer.from([2, 3])\n * }\n *\n * const result = await toBuffer(values())\n *\n * console.info(result) // Buffer[0, 1, 2, 3]\n * ```\n */\n\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n */\nfunction toBuffer (source: Iterable<Uint8Array>): Uint8Array\nfunction toBuffer (source: Iterable<Uint8Array> | AsyncIterable<Uint8Array>): Promise<Uint8Array>\nfunction toBuffer (source: Iterable<Uint8Array> | AsyncIterable<Uint8Array>): Promise<Uint8Array> | Uint8Array {\n  if (isAsyncIterable(source)) {\n    return (async () => {\n      // https://github.com/microsoft/TypeScript/issues/61793\n      let buffer: Uint8Array = new Uint8Array(0)\n\n      for await (const buf of source) {\n        buffer = uint8ArrayConcat([buffer, buf], buffer.length + buf.length)\n      }\n\n      return buffer\n    })()\n  }\n\n  const bufs = []\n  let length = 0\n\n  for (const buf of source) {\n    bufs.push(buf)\n    length += buf.byteLength\n  }\n\n  return uint8ArrayConcat(bufs, length)\n}\n\nexport default toBuffer\n", "/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc (size: number = 0): Uint8Array {\n  return new Uint8Array(size)\n}\n\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe (size: number = 0): Uint8Array {\n  return new Uint8Array(size)\n}\n", "import { allocUnsafe } from '#alloc'\nimport { asUint8Array } from '#util/as-uint8array'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Uint8Arrays\n */\nexport function concat (arrays: Uint8Array[], length?: number): Uint8Array {\n  if (length == null) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = allocUnsafe(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return asUint8Array(output)\n}\n"],
  "mappings": ";8bAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,ICaM,SAAUC,EAAaC,EAAe,EAAC,CAC3C,OAAO,IAAI,WAAWA,CAAI,CAC5B,CCTM,SAAUC,EAAQC,EAAsBC,EAAe,CACvDA,GAAU,OACZA,EAASD,EAAO,OAAO,CAACE,EAAKC,IAASD,EAAMC,EAAK,OAAQ,CAAC,GAG5D,IAAMC,EAASC,EAAYJ,CAAM,EAC7BK,EAAS,EAEb,QAAWC,KAAOP,EAChBI,EAAO,IAAIG,EAAKD,CAAM,EACtBA,GAAUC,EAAI,OAGhB,OAAoBH,CACtB,CFgBA,SAASI,EAAqBC,EAAU,CACtC,OAAOA,EAAM,OAAO,aAAa,GAAK,IACxC,CAQA,SAASC,EAAUC,EAAwD,CACzE,GAAIH,EAAgBG,CAAM,EACxB,OAAQ,SAAW,CAEjB,IAAIC,EAAqB,IAAI,WAAW,CAAC,EAEzC,cAAiBC,KAAOF,EACtBC,EAASE,EAAiB,CAACF,EAAQC,CAAG,EAAGD,EAAO,OAASC,EAAI,MAAM,EAGrE,OAAOD,CACT,GAAE,EAGJ,IAAMG,EAAO,CAAA,EACTC,EAAS,EAEb,QAAWH,KAAOF,EAChBI,EAAK,KAAKF,CAAG,EACbG,GAAUH,EAAI,WAGhB,OAAOC,EAAiBC,EAAMC,CAAM,CACtC,CAEA,IAAAC,EAAeP",
  "names": ["index_exports", "__export", "index_default", "allocUnsafe", "size", "concat", "arrays", "length", "acc", "curr", "output", "allocUnsafe", "offset", "arr", "isAsyncIterable", "thing", "toBuffer", "source", "buffer", "buf", "concat", "bufs", "length", "index_default"]
}
