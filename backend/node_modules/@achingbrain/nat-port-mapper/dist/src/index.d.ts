/**
 * @packageDocumentation
 *
 * @example
 *
 * ```js
 * import { upnpNat } from '@achingbrain/nat-port-mapper'
 *
 * const client = await upnpNat({
 *   // all fields are optional
 *   ttl: number // how long mappings should live for in seconds - min 20 minutes, default 2 hours
 *   description: string // default description to pass to the router for a mapped port
 *   gateway: string // override the router address, will be auto-detected if not set
 *   keepAlive: boolean // if true, refresh the mapping ten minutes before the ttl is reached, default true
 * })
 *
 * // Map public port 1000 to private port 1000 with TCP
 * await client.map({
 *   localPort: 1000,
 *   protocol: 'TCP'
 * })
 *
 * // Map public port 2000 to private port 3000 with UDP
 * await client.map({
 *   publicPort: 2000,
 *   localPort: 3000,
 *   protocol: 'UDP'
 * })
 *
 * // Unmap port public and private port 1000 with TCP
 * await client.unmap({
 *   localPort: 1000,
 *   protocol: 'TCP'
 * })
 *
 * // Get external IP
 * const externalIp = await client.externalIp()
 *
 * console.log('External IP:', ip)
 *
 * // Unmap all mapped ports
 * client.close()
 * ```
 *
 * ## Credits
 *
 * Based on [alxhotel/nat-api](https://github.com/alxhotel/nat-api)
 *
 * ## Additional Information
 *
 * - <http://miniupnp.free.fr/nat-pmp.html>
 * - <http://wikipedia.org/wiki/NAT_Port_Mapping_Protocol>
 * - <http://tools.ietf.org/html/draft-cheshire-nat-pmp-03>
 */
export interface NatAPIOptions {
    /**
     * TTL in seconds, minimum one minute
     *
     * @default 7200
     */
    ttl?: number;
    description?: string;
    gateway?: string;
    keepAlive?: boolean;
}
export interface MapPortOptions {
    publicPort: number;
    localPort: number;
    localAddress: string;
    protocol: 'TCP' | 'UDP';
    description: string;
    ttl: number;
    gateway?: string;
}
export interface UnmapPortOptions {
    publicPort: number;
    localPort: number;
    protocol: 'TCP' | 'UDP';
}
export interface Client {
    close(): Promise<void>;
    map(options: MapPortOptions): Promise<void>;
    unmap(options: UnmapPortOptions): Promise<void>;
    externalIp(): Promise<string>;
}
export declare class NatAPI {
    openPorts: MapPortOptions[];
    private readonly ttl;
    private readonly description;
    private readonly gateway?;
    private readonly keepAlive;
    private readonly keepAliveInterval;
    private readonly destroyed;
    private readonly client;
    private readonly updateIntervals;
    constructor(opts: NatAPIOptions | undefined, client: Client);
    map(options?: Partial<MapPortOptions>): Promise<void>;
    unmap(options: Partial<UnmapPortOptions>): Promise<void>;
    close(): Promise<void>;
    validateInput(options?: Partial<MapPortOptions>): MapPortOptions;
    externalIp(): Promise<string>;
}
export declare function upnpNat(options?: Partial<NatAPIOptions>): NatAPI;
export declare function pmpNat(options?: Partial<NatAPIOptions>): Promise<NatAPI>;
//# sourceMappingURL=index.d.ts.map